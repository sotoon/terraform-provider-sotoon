// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/git.cafebazaar.ir/infrastructure/bepa-client/pkg/client/interface.go

// Package iam is a generated GoMock package.
package iam

import (
	url "net/url"
	reflect "reflect"
	time "time"

	types "git.cafebazaar.ir/infrastructure/bepa-client/pkg/types"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockClient) ActivateUser(userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockClientMockRecorder) ActivateUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockClient)(nil).ActivateUser), userUUID)
}

// ActivateUserInWorkspace mocks base method.
func (m *MockClient) ActivateUserInWorkspace(workspaceUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUserInWorkspace", workspaceUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUserInWorkspace indicates an expected call of ActivateUserInWorkspace.
func (mr *MockClientMockRecorder) ActivateUserInWorkspace(workspaceUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUserInWorkspace", reflect.TypeOf((*MockClient)(nil).ActivateUserInWorkspace), workspaceUUID, userUUID)
}

// AddUserToWorkspace mocks base method.
func (m *MockClient) AddUserToWorkspace(userUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToWorkspace", userUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToWorkspace indicates an expected call of AddUserToWorkspace.
func (mr *MockClientMockRecorder) AddUserToWorkspace(userUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToWorkspace", reflect.TypeOf((*MockClient)(nil).AddUserToWorkspace), userUUID, workspaceUUID)
}

// Authorize mocks base method.
func (m *MockClient) Authorize(identity, userType, action, object string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", identity, userType, action, object)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockClientMockRecorder) Authorize(identity, userType, action, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockClient)(nil).Authorize), identity, userType, action, object)
}

// BindGroup mocks base method.
func (m *MockClient) BindGroup(groupName string, workspace, groupUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindGroup", groupName, workspace, groupUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindGroup indicates an expected call of BindGroup.
func (mr *MockClientMockRecorder) BindGroup(groupName, workspace, groupUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindGroup", reflect.TypeOf((*MockClient)(nil).BindGroup), groupName, workspace, groupUUID, userUUID)
}

// BindRoleToGroup mocks base method.
func (m *MockClient) BindRoleToGroup(workspaceUUID, roleUUID, groupUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindRoleToGroup", workspaceUUID, roleUUID, groupUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindRoleToGroup indicates an expected call of BindRoleToGroup.
func (mr *MockClientMockRecorder) BindRoleToGroup(workspaceUUID, roleUUID, groupUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindRoleToGroup", reflect.TypeOf((*MockClient)(nil).BindRoleToGroup), workspaceUUID, roleUUID, groupUUID, items)
}

// BindRoleToServiceUser mocks base method.
func (m *MockClient) BindRoleToServiceUser(workspaceUUID, roleUUID, serviceUserUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindRoleToServiceUser", workspaceUUID, roleUUID, serviceUserUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindRoleToServiceUser indicates an expected call of BindRoleToServiceUser.
func (mr *MockClientMockRecorder) BindRoleToServiceUser(workspaceUUID, roleUUID, serviceUserUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindRoleToServiceUser", reflect.TypeOf((*MockClient)(nil).BindRoleToServiceUser), workspaceUUID, roleUUID, serviceUserUUID, items)
}

// BindRoleToUser mocks base method.
func (m *MockClient) BindRoleToUser(workspaceUUID, roleUUID, userUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindRoleToUser", workspaceUUID, roleUUID, userUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindRoleToUser indicates an expected call of BindRoleToUser.
func (mr *MockClientMockRecorder) BindRoleToUser(workspaceUUID, roleUUID, userUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindRoleToUser", reflect.TypeOf((*MockClient)(nil).BindRoleToUser), workspaceUUID, roleUUID, userUUID, items)
}

// BindRuleToRole mocks base method.
func (m *MockClient) BindRuleToRole(roleUUID, ruleUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindRuleToRole", roleUUID, ruleUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindRuleToRole indicates an expected call of BindRuleToRole.
func (mr *MockClientMockRecorder) BindRuleToRole(roleUUID, ruleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindRuleToRole", reflect.TypeOf((*MockClient)(nil).BindRuleToRole), roleUUID, ruleUUID, workspaceUUID)
}

// BindServiceUserToGroup mocks base method.
func (m *MockClient) BindServiceUserToGroup(worspaceUUID, groupUUID, serviceUserUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindServiceUserToGroup", worspaceUUID, groupUUID, serviceUserUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindServiceUserToGroup indicates an expected call of BindServiceUserToGroup.
func (mr *MockClientMockRecorder) BindServiceUserToGroup(worspaceUUID, groupUUID, serviceUserUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindServiceUserToGroup", reflect.TypeOf((*MockClient)(nil).BindServiceUserToGroup), worspaceUUID, groupUUID, serviceUserUUID)
}

// CreateBackupKeyForDefaultWorkspace mocks base method.
func (m *MockClient) CreateBackupKeyForDefaultWorkspace(title, keyType, key string) (*types.BackupKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupKeyForDefaultWorkspace", title, keyType, key)
	ret0, _ := ret[0].(*types.BackupKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupKeyForDefaultWorkspace indicates an expected call of CreateBackupKeyForDefaultWorkspace.
func (mr *MockClientMockRecorder) CreateBackupKeyForDefaultWorkspace(title, keyType, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupKeyForDefaultWorkspace", reflect.TypeOf((*MockClient)(nil).CreateBackupKeyForDefaultWorkspace), title, keyType, key)
}

// CreateBackupKeyFromFileForDefaultUser mocks base method.
func (m *MockClient) CreateBackupKeyFromFileForDefaultUser(title, fileAdd string) (*types.BackupKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupKeyFromFileForDefaultUser", title, fileAdd)
	ret0, _ := ret[0].(*types.BackupKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupKeyFromFileForDefaultUser indicates an expected call of CreateBackupKeyFromFileForDefaultUser.
func (mr *MockClientMockRecorder) CreateBackupKeyFromFileForDefaultUser(title, fileAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupKeyFromFileForDefaultUser", reflect.TypeOf((*MockClient)(nil).CreateBackupKeyFromFileForDefaultUser), title, fileAdd)
}

// CreateGroup mocks base method.
func (m *MockClient) CreateGroup(groupName string, workspace *uuid.UUID) (*types.GroupRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", groupName, workspace)
	ret0, _ := ret[0].(*types.GroupRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockClientMockRecorder) CreateGroup(groupName, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockClient)(nil).CreateGroup), groupName, workspace)
}

// CreateKiseSecretForDefaultUser mocks base method.
func (m *MockClient) CreateKiseSecretForDefaultUser() (*types.KiseSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKiseSecretForDefaultUser")
	ret0, _ := ret[0].(*types.KiseSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKiseSecretForDefaultUser indicates an expected call of CreateKiseSecretForDefaultUser.
func (mr *MockClientMockRecorder) CreateKiseSecretForDefaultUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKiseSecretForDefaultUser", reflect.TypeOf((*MockClient)(nil).CreateKiseSecretForDefaultUser))
}

// CreateMyUserTokenWithToken mocks base method.
func (m *MockClient) CreateMyUserTokenWithToken(secret string) (*types.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMyUserTokenWithToken", secret)
	ret0, _ := ret[0].(*types.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMyUserTokenWithToken indicates an expected call of CreateMyUserTokenWithToken.
func (mr *MockClientMockRecorder) CreateMyUserTokenWithToken(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMyUserTokenWithToken", reflect.TypeOf((*MockClient)(nil).CreateMyUserTokenWithToken), secret)
}

// CreatePublicKeyForDefaultUser mocks base method.
func (m *MockClient) CreatePublicKeyForDefaultUser(title, keyType, key string) (*types.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKeyForDefaultUser", title, keyType, key)
	ret0, _ := ret[0].(*types.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKeyForDefaultUser indicates an expected call of CreatePublicKeyForDefaultUser.
func (mr *MockClientMockRecorder) CreatePublicKeyForDefaultUser(title, keyType, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyForDefaultUser", reflect.TypeOf((*MockClient)(nil).CreatePublicKeyForDefaultUser), title, keyType, key)
}

// CreatePublicKeyFromFileForDefaultUser mocks base method.
func (m *MockClient) CreatePublicKeyFromFileForDefaultUser(title, fileAdd string) (*types.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKeyFromFileForDefaultUser", title, fileAdd)
	ret0, _ := ret[0].(*types.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKeyFromFileForDefaultUser indicates an expected call of CreatePublicKeyFromFileForDefaultUser.
func (mr *MockClientMockRecorder) CreatePublicKeyFromFileForDefaultUser(title, fileAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyFromFileForDefaultUser", reflect.TypeOf((*MockClient)(nil).CreatePublicKeyFromFileForDefaultUser), title, fileAdd)
}

// CreateRole mocks base method.
func (m *MockClient) CreateRole(roleName string, workspaceUUID *uuid.UUID) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", roleName, workspaceUUID)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockClientMockRecorder) CreateRole(roleName, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockClient)(nil).CreateRole), roleName, workspaceUUID)
}

// CreateRule mocks base method.
func (m *MockClient) CreateRule(ruleName string, workspaceUUID *uuid.UUID, ruleActions []string, object string, deny bool) (*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", ruleName, workspaceUUID, ruleActions, object, deny)
	ret0, _ := ret[0].(*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockClientMockRecorder) CreateRule(ruleName, workspaceUUID, ruleActions, object, deny interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockClient)(nil).CreateRule), ruleName, workspaceUUID, ruleActions, object, deny)
}

// CreateServiceUser mocks base method.
func (m *MockClient) CreateServiceUser(serviceUserName string, workspace *uuid.UUID) (*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceUser", serviceUserName, workspace)
	ret0, _ := ret[0].(*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceUser indicates an expected call of CreateServiceUser.
func (mr *MockClientMockRecorder) CreateServiceUser(serviceUserName, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceUser", reflect.TypeOf((*MockClient)(nil).CreateServiceUser), serviceUserName, workspace)
}

// CreateServiceUserToken mocks base method.
func (m *MockClient) CreateServiceUserToken(serviceUserUUID, workspaceUUID *uuid.UUID) (*types.ServiceUserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceUserToken", serviceUserUUID, workspaceUUID)
	ret0, _ := ret[0].(*types.ServiceUserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceUserToken indicates an expected call of CreateServiceUserToken.
func (mr *MockClientMockRecorder) CreateServiceUserToken(serviceUserUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceUserToken", reflect.TypeOf((*MockClient)(nil).CreateServiceUserToken), serviceUserUUID, workspaceUUID)
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(userName, email, password string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userName, email, password)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(userName, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), userName, email, password)
}

// CreateUserTokenByCreds mocks base method.
func (m *MockClient) CreateUserTokenByCreds(email, password string) (*types.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTokenByCreds", email, password)
	ret0, _ := ret[0].(*types.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTokenByCreds indicates an expected call of CreateUserTokenByCreds.
func (mr *MockClientMockRecorder) CreateUserTokenByCreds(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTokenByCreds", reflect.TypeOf((*MockClient)(nil).CreateUserTokenByCreds), email, password)
}

// CreateWorkspace mocks base method.
func (m *MockClient) CreateWorkspace(name string) (*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", name)
	ret0, _ := ret[0].(*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockClientMockRecorder) CreateWorkspace(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockClient)(nil).CreateWorkspace), name)
}

// DeleteDefaultUserPublicKey mocks base method.
func (m *MockClient) DeleteDefaultUserPublicKey(publicKeyUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultUserPublicKey", publicKeyUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDefaultUserPublicKey indicates an expected call of DeleteDefaultUserPublicKey.
func (mr *MockClientMockRecorder) DeleteDefaultUserPublicKey(publicKeyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultUserPublicKey", reflect.TypeOf((*MockClient)(nil).DeleteDefaultUserPublicKey), publicKeyUUID)
}

// DeleteDefaultWorkspaceBackupKey mocks base method.
func (m *MockClient) DeleteDefaultWorkspaceBackupKey(backupKeyUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultWorkspaceBackupKey", backupKeyUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDefaultWorkspaceBackupKey indicates an expected call of DeleteDefaultWorkspaceBackupKey.
func (mr *MockClientMockRecorder) DeleteDefaultWorkspaceBackupKey(backupKeyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultWorkspaceBackupKey", reflect.TypeOf((*MockClient)(nil).DeleteDefaultWorkspaceBackupKey), backupKeyUUID)
}

// DeleteGroup mocks base method.
func (m *MockClient) DeleteGroup(workspaceUUID, groupUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", workspaceUUID, groupUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockClientMockRecorder) DeleteGroup(workspaceUUID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockClient)(nil).DeleteGroup), workspaceUUID, groupUUID)
}

// DeleteMySelf mocks base method.
func (m *MockClient) DeleteMySelf() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMySelf")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMySelf indicates an expected call of DeleteMySelf.
func (mr *MockClientMockRecorder) DeleteMySelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMySelf", reflect.TypeOf((*MockClient)(nil).DeleteMySelf))
}

// DeleteMyUserToken mocks base method.
func (m *MockClient) DeleteMyUserToken(UserTokenUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMyUserToken", UserTokenUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMyUserToken indicates an expected call of DeleteMyUserToken.
func (mr *MockClientMockRecorder) DeleteMyUserToken(UserTokenUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMyUserToken", reflect.TypeOf((*MockClient)(nil).DeleteMyUserToken), UserTokenUUID)
}

// DeleteRole mocks base method.
func (m *MockClient) DeleteRole(roleUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", roleUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockClientMockRecorder) DeleteRole(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockClient)(nil).DeleteRole), roleUUID, workspaceUUID)
}

// DeleteRule mocks base method.
func (m *MockClient) DeleteRule(ruleUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", ruleUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockClientMockRecorder) DeleteRule(ruleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockClient)(nil).DeleteRule), ruleUUID, workspaceUUID)
}

// DeleteServiceUser mocks base method.
func (m *MockClient) DeleteServiceUser(workspaceUUID, serviceUserUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceUser", workspaceUUID, serviceUserUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceUser indicates an expected call of DeleteServiceUser.
func (mr *MockClientMockRecorder) DeleteServiceUser(workspaceUUID, serviceUserUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceUser", reflect.TypeOf((*MockClient)(nil).DeleteServiceUser), workspaceUUID, serviceUserUUID)
}

// DeleteServiceUserToken mocks base method.
func (m *MockClient) DeleteServiceUserToken(serviceUserUUID, workspaceUUID, serviceUserTokenUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceUserToken", serviceUserUUID, workspaceUUID, serviceUserTokenUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceUserToken indicates an expected call of DeleteServiceUserToken.
func (mr *MockClientMockRecorder) DeleteServiceUserToken(serviceUserUUID, workspaceUUID, serviceUserTokenUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceUserToken", reflect.TypeOf((*MockClient)(nil).DeleteServiceUserToken), serviceUserUUID, workspaceUUID, serviceUserTokenUUID)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), userUUID)
}

// DeleteUserKiseSecret mocks base method.
func (m *MockClient) DeleteUserKiseSecret(KiseSecretUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserKiseSecret", KiseSecretUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserKiseSecret indicates an expected call of DeleteUserKiseSecret.
func (mr *MockClientMockRecorder) DeleteUserKiseSecret(KiseSecretUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserKiseSecret", reflect.TypeOf((*MockClient)(nil).DeleteUserKiseSecret), KiseSecretUUID)
}

// DeleteWorkspace mocks base method.
func (m *MockClient) DeleteWorkspace(uuid *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockClientMockRecorder) DeleteWorkspace(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockClient)(nil).DeleteWorkspace), uuid)
}

// Do mocks base method.
func (m *MockClient) Do(method, path string, successCode int, req, resp interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", method, path, successCode, req, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(method, path, successCode, req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), method, path, successCode, req, resp)
}

// GetAllDefaultBackupKeys mocks base method.
func (m *MockClient) GetAllDefaultBackupKeys() ([]*types.BackupKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDefaultBackupKeys")
	ret0, _ := ret[0].([]*types.BackupKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDefaultBackupKeys indicates an expected call of GetAllDefaultBackupKeys.
func (mr *MockClientMockRecorder) GetAllDefaultBackupKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDefaultBackupKeys", reflect.TypeOf((*MockClient)(nil).GetAllDefaultBackupKeys))
}

// GetAllDefaultUserPublicKeys mocks base method.
func (m *MockClient) GetAllDefaultUserPublicKeys() ([]*types.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDefaultUserPublicKeys")
	ret0, _ := ret[0].([]*types.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDefaultUserPublicKeys indicates an expected call of GetAllDefaultUserPublicKeys.
func (mr *MockClientMockRecorder) GetAllDefaultUserPublicKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDefaultUserPublicKeys", reflect.TypeOf((*MockClient)(nil).GetAllDefaultUserPublicKeys))
}

// GetAllGroupServiceUsers mocks base method.
func (m *MockClient) GetAllGroupServiceUsers(workspaceUUID, groupUUID *uuid.UUID) ([]*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupServiceUsers", workspaceUUID, groupUUID)
	ret0, _ := ret[0].([]*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupServiceUsers indicates an expected call of GetAllGroupServiceUsers.
func (mr *MockClientMockRecorder) GetAllGroupServiceUsers(workspaceUUID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupServiceUsers", reflect.TypeOf((*MockClient)(nil).GetAllGroupServiceUsers), workspaceUUID, groupUUID)
}

// GetAllGroupUsers mocks base method.
func (m *MockClient) GetAllGroupUsers(workspaceUUID, groupUUID *uuid.UUID) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupUsers", workspaceUUID, groupUUID)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupUsers indicates an expected call of GetAllGroupUsers.
func (mr *MockClientMockRecorder) GetAllGroupUsers(workspaceUUID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupUsers", reflect.TypeOf((*MockClient)(nil).GetAllGroupUsers), workspaceUUID, groupUUID)
}

// GetAllGroups mocks base method.
func (m *MockClient) GetAllGroups(workspaceUUID *uuid.UUID) ([]*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups", workspaceUUID)
	ret0, _ := ret[0].([]*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockClientMockRecorder) GetAllGroups(workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockClient)(nil).GetAllGroups), workspaceUUID)
}

// GetAllMyUserTokens mocks base method.
func (m *MockClient) GetAllMyUserTokens() (*[]types.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMyUserTokens")
	ret0, _ := ret[0].(*[]types.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMyUserTokens indicates an expected call of GetAllMyUserTokens.
func (mr *MockClientMockRecorder) GetAllMyUserTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMyUserTokens", reflect.TypeOf((*MockClient)(nil).GetAllMyUserTokens))
}

// GetAllRoles mocks base method.
func (m *MockClient) GetAllRoles() ([]*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles")
	ret0, _ := ret[0].([]*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockClientMockRecorder) GetAllRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockClient)(nil).GetAllRoles))
}

// GetAllRules mocks base method.
func (m *MockClient) GetAllRules() ([]*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRules")
	ret0, _ := ret[0].([]*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRules indicates an expected call of GetAllRules.
func (mr *MockClientMockRecorder) GetAllRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRules", reflect.TypeOf((*MockClient)(nil).GetAllRules))
}

// GetAllServiceUserToken mocks base method.
func (m *MockClient) GetAllServiceUserToken(serviceUserUUID, workspaceUUID *uuid.UUID) (*[]types.ServiceUserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceUserToken", serviceUserUUID, workspaceUUID)
	ret0, _ := ret[0].(*[]types.ServiceUserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceUserToken indicates an expected call of GetAllServiceUserToken.
func (mr *MockClientMockRecorder) GetAllServiceUserToken(serviceUserUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceUserToken", reflect.TypeOf((*MockClient)(nil).GetAllServiceUserToken), serviceUserUUID, workspaceUUID)
}

// GetAllServices mocks base method.
func (m *MockClient) GetAllServices() (*[]types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServices")
	ret0, _ := ret[0].(*[]types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServices indicates an expected call of GetAllServices.
func (mr *MockClientMockRecorder) GetAllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServices", reflect.TypeOf((*MockClient)(nil).GetAllServices))
}

// GetAllUserKiseSecret mocks base method.
func (m *MockClient) GetAllUserKiseSecret() ([]*types.KiseSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserKiseSecret")
	ret0, _ := ret[0].([]*types.KiseSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserKiseSecret indicates an expected call of GetAllUserKiseSecret.
func (mr *MockClientMockRecorder) GetAllUserKiseSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserKiseSecret", reflect.TypeOf((*MockClient)(nil).GetAllUserKiseSecret))
}

// GetAllUserRules mocks base method.
func (m *MockClient) GetAllUserRules(userUUID *uuid.UUID) ([]*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserRules", userUUID)
	ret0, _ := ret[0].([]*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserRules indicates an expected call of GetAllUserRules.
func (mr *MockClientMockRecorder) GetAllUserRules(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserRules", reflect.TypeOf((*MockClient)(nil).GetAllUserRules), userUUID)
}

// GetBepaURL mocks base method.
func (m *MockClient) GetBepaURL() (*url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBepaURL")
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBepaURL indicates an expected call of GetBepaURL.
func (mr *MockClientMockRecorder) GetBepaURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBepaURL", reflect.TypeOf((*MockClient)(nil).GetBepaURL))
}

// GetBindedRoleToGroupItems mocks base method.
func (m *MockClient) GetBindedRoleToGroupItems(workspaceUUID, roleUUID, userUUID *uuid.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindedRoleToGroupItems", workspaceUUID, roleUUID, userUUID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindedRoleToGroupItems indicates an expected call of GetBindedRoleToGroupItems.
func (mr *MockClientMockRecorder) GetBindedRoleToGroupItems(workspaceUUID, roleUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindedRoleToGroupItems", reflect.TypeOf((*MockClient)(nil).GetBindedRoleToGroupItems), workspaceUUID, roleUUID, userUUID)
}

// GetBindedRoleToServiceUserItems mocks base method.
func (m *MockClient) GetBindedRoleToServiceUserItems(workspaceUUID, roleUUID, userUUID *uuid.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindedRoleToServiceUserItems", workspaceUUID, roleUUID, userUUID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindedRoleToServiceUserItems indicates an expected call of GetBindedRoleToServiceUserItems.
func (mr *MockClientMockRecorder) GetBindedRoleToServiceUserItems(workspaceUUID, roleUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindedRoleToServiceUserItems", reflect.TypeOf((*MockClient)(nil).GetBindedRoleToServiceUserItems), workspaceUUID, roleUUID, userUUID)
}

// GetBindedRoleToUserItems mocks base method.
func (m *MockClient) GetBindedRoleToUserItems(workspaceUUID, roleUUID, userUUID *uuid.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindedRoleToUserItems", workspaceUUID, roleUUID, userUUID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindedRoleToUserItems indicates an expected call of GetBindedRoleToUserItems.
func (mr *MockClientMockRecorder) GetBindedRoleToUserItems(workspaceUUID, roleUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindedRoleToUserItems", reflect.TypeOf((*MockClient)(nil).GetBindedRoleToUserItems), workspaceUUID, roleUUID, userUUID)
}

// GetGroup mocks base method.
func (m *MockClient) GetGroup(workspaceUUID, groupUUID *uuid.UUID) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", workspaceUUID, groupUUID)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockClientMockRecorder) GetGroup(workspaceUUID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockClient)(nil).GetGroup), workspaceUUID, groupUUID)
}

// GetGroupByName mocks base method.
func (m *MockClient) GetGroupByName(workspaceName, groupName string) (*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", workspaceName, groupName)
	ret0, _ := ret[0].(*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByName indicates an expected call of GetGroupByName.
func (mr *MockClientMockRecorder) GetGroupByName(workspaceName, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockClient)(nil).GetGroupByName), workspaceName, groupName)
}

// GetGroupServiceUser mocks base method.
func (m *MockClient) GetGroupServiceUser(worspaceUUID, groupUUID, serviceUserUUID *uuid.UUID) (*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupServiceUser", worspaceUUID, groupUUID, serviceUserUUID)
	ret0, _ := ret[0].(*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupServiceUser indicates an expected call of GetGroupServiceUser.
func (mr *MockClientMockRecorder) GetGroupServiceUser(worspaceUUID, groupUUID, serviceUserUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupServiceUser", reflect.TypeOf((*MockClient)(nil).GetGroupServiceUser), worspaceUUID, groupUUID, serviceUserUUID)
}

// GetGroupUser mocks base method.
func (m *MockClient) GetGroupUser(workspaceUUID, groupUUID, userUUID *uuid.UUID) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUser", workspaceUUID, groupUUID, userUUID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupUser indicates an expected call of GetGroupUser.
func (mr *MockClientMockRecorder) GetGroupUser(workspaceUUID, groupUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUser", reflect.TypeOf((*MockClient)(nil).GetGroupUser), workspaceUUID, groupUUID, userUUID)
}

// GetMySelf mocks base method.
func (m *MockClient) GetMySelf() (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMySelf")
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMySelf indicates an expected call of GetMySelf.
func (mr *MockClientMockRecorder) GetMySelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMySelf", reflect.TypeOf((*MockClient)(nil).GetMySelf))
}

// GetMyUserToken mocks base method.
func (m *MockClient) GetMyUserToken(UserTokenUUID *uuid.UUID) (*types.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyUserToken", UserTokenUUID)
	ret0, _ := ret[0].(*types.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyUserToken indicates an expected call of GetMyUserToken.
func (mr *MockClientMockRecorder) GetMyUserToken(UserTokenUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyUserToken", reflect.TypeOf((*MockClient)(nil).GetMyUserToken), UserTokenUUID)
}

// GetMyWorkspaces mocks base method.
func (m *MockClient) GetMyWorkspaces() ([]*types.WorkspaceWithOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyWorkspaces")
	ret0, _ := ret[0].([]*types.WorkspaceWithOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyWorkspaces indicates an expected call of GetMyWorkspaces.
func (mr *MockClientMockRecorder) GetMyWorkspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyWorkspaces", reflect.TypeOf((*MockClient)(nil).GetMyWorkspaces))
}

// GetOneDefaultBackupKey mocks base method.
func (m *MockClient) GetOneDefaultBackupKey(BackupKeyUUID *uuid.UUID) (*types.BackupKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneDefaultBackupKey", BackupKeyUUID)
	ret0, _ := ret[0].(*types.BackupKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneDefaultBackupKey indicates an expected call of GetOneDefaultBackupKey.
func (mr *MockClientMockRecorder) GetOneDefaultBackupKey(BackupKeyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneDefaultBackupKey", reflect.TypeOf((*MockClient)(nil).GetOneDefaultBackupKey), BackupKeyUUID)
}

// GetOneDefaultUserPublicKey mocks base method.
func (m *MockClient) GetOneDefaultUserPublicKey(publicKeyUUID *uuid.UUID) (*types.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneDefaultUserPublicKey", publicKeyUUID)
	ret0, _ := ret[0].(*types.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneDefaultUserPublicKey indicates an expected call of GetOneDefaultUserPublicKey.
func (mr *MockClientMockRecorder) GetOneDefaultUserPublicKey(publicKeyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneDefaultUserPublicKey", reflect.TypeOf((*MockClient)(nil).GetOneDefaultUserPublicKey), publicKeyUUID)
}

// GetOrganization mocks base method.
func (m *MockClient) GetOrganization(arg0 *uuid.UUID) (*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0)
	ret0, _ := ret[0].(*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockClientMockRecorder) GetOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockClient)(nil).GetOrganization), arg0)
}

// GetOrganizationWorkspace mocks base method.
func (m *MockClient) GetOrganizationWorkspace(arg0, arg1 *uuid.UUID) (*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationWorkspace", arg0, arg1)
	ret0, _ := ret[0].(*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationWorkspace indicates an expected call of GetOrganizationWorkspace.
func (mr *MockClientMockRecorder) GetOrganizationWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationWorkspace", reflect.TypeOf((*MockClient)(nil).GetOrganizationWorkspace), arg0, arg1)
}

// GetOrganizationWorkspaces mocks base method.
func (m *MockClient) GetOrganizationWorkspaces(arg0 *uuid.UUID) ([]*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationWorkspaces", arg0)
	ret0, _ := ret[0].([]*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationWorkspaces indicates an expected call of GetOrganizationWorkspaces.
func (mr *MockClientMockRecorder) GetOrganizationWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationWorkspaces", reflect.TypeOf((*MockClient)(nil).GetOrganizationWorkspaces), arg0)
}

// GetOrganizations mocks base method.
func (m *MockClient) GetOrganizations() ([]*types.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations")
	ret0, _ := ret[0].([]*types.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockClientMockRecorder) GetOrganizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockClient)(nil).GetOrganizations))
}

// GetRole mocks base method.
func (m *MockClient) GetRole(roleUUID, workspaceUUID *uuid.UUID) (*types.RoleRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", roleUUID, workspaceUUID)
	ret0, _ := ret[0].(*types.RoleRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockClientMockRecorder) GetRole(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockClient)(nil).GetRole), roleUUID, workspaceUUID)
}

// GetRoleByName mocks base method.
func (m *MockClient) GetRoleByName(roleName, workspaceName string) (*types.RoleRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", roleName, workspaceName)
	ret0, _ := ret[0].(*types.RoleRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockClientMockRecorder) GetRoleByName(roleName, workspaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockClient)(nil).GetRoleByName), roleName, workspaceName)
}

// GetRoleGroups mocks base method.
func (m *MockClient) GetRoleGroups(roleUUID, workspaceUUID *uuid.UUID) ([]*types.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleGroups", roleUUID, workspaceUUID)
	ret0, _ := ret[0].([]*types.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleGroups indicates an expected call of GetRoleGroups.
func (mr *MockClientMockRecorder) GetRoleGroups(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleGroups", reflect.TypeOf((*MockClient)(nil).GetRoleGroups), roleUUID, workspaceUUID)
}

// GetRoleRules mocks base method.
func (m *MockClient) GetRoleRules(roleUUID, workspaceUUID *uuid.UUID) ([]*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleRules", roleUUID, workspaceUUID)
	ret0, _ := ret[0].([]*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleRules indicates an expected call of GetRoleRules.
func (mr *MockClientMockRecorder) GetRoleRules(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleRules", reflect.TypeOf((*MockClient)(nil).GetRoleRules), roleUUID, workspaceUUID)
}

// GetRoleServiceUsers mocks base method.
func (m *MockClient) GetRoleServiceUsers(roleUUID, workspaceUUID *uuid.UUID) ([]*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleServiceUsers", roleUUID, workspaceUUID)
	ret0, _ := ret[0].([]*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleServiceUsers indicates an expected call of GetRoleServiceUsers.
func (mr *MockClientMockRecorder) GetRoleServiceUsers(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleServiceUsers", reflect.TypeOf((*MockClient)(nil).GetRoleServiceUsers), roleUUID, workspaceUUID)
}

// GetRoleUsers mocks base method.
func (m *MockClient) GetRoleUsers(roleUUID, workspaceUUID *uuid.UUID) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleUsers", roleUUID, workspaceUUID)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleUsers indicates an expected call of GetRoleUsers.
func (mr *MockClientMockRecorder) GetRoleUsers(roleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleUsers", reflect.TypeOf((*MockClient)(nil).GetRoleUsers), roleUUID, workspaceUUID)
}

// GetRule mocks base method.
func (m *MockClient) GetRule(ruleUUID, workspaceUUID *uuid.UUID) (*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", ruleUUID, workspaceUUID)
	ret0, _ := ret[0].(*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockClientMockRecorder) GetRule(ruleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockClient)(nil).GetRule), ruleUUID, workspaceUUID)
}

// GetRuleByName mocks base method.
func (m *MockClient) GetRuleByName(ruleName, workspaceName string) (*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleByName", ruleName, workspaceName)
	ret0, _ := ret[0].(*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleByName indicates an expected call of GetRuleByName.
func (mr *MockClientMockRecorder) GetRuleByName(ruleName, workspaceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleByName", reflect.TypeOf((*MockClient)(nil).GetRuleByName), ruleName, workspaceName)
}

// GetRuleRoles mocks base method.
func (m *MockClient) GetRuleRoles(ruleUUID, workspaceUUID *uuid.UUID) ([]*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRoles", ruleUUID, workspaceUUID)
	ret0, _ := ret[0].([]*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleRoles indicates an expected call of GetRuleRoles.
func (mr *MockClientMockRecorder) GetRuleRoles(ruleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRoles", reflect.TypeOf((*MockClient)(nil).GetRuleRoles), ruleUUID, workspaceUUID)
}

// GetSecret mocks base method.
func (m *MockClient) GetSecret(userUUID *uuid.UUID) (*types.UserSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", userUUID)
	ret0, _ := ret[0].(*types.UserSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientMockRecorder) GetSecret(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClient)(nil).GetSecret), userUUID)
}

// GetServerURL mocks base method.
func (m *MockClient) GetServerURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerURL indicates an expected call of GetServerURL.
func (mr *MockClientMockRecorder) GetServerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerURL", reflect.TypeOf((*MockClient)(nil).GetServerURL))
}

// GetService mocks base method.
func (m *MockClient) GetService(name string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", name)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockClientMockRecorder) GetService(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClient)(nil).GetService), name)
}

// GetServiceUser mocks base method.
func (m *MockClient) GetServiceUser(workspaceUUID, serviceUserUUID *uuid.UUID) (*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUser", workspaceUUID, serviceUserUUID)
	ret0, _ := ret[0].(*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceUser indicates an expected call of GetServiceUser.
func (mr *MockClientMockRecorder) GetServiceUser(workspaceUUID, serviceUserUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUser", reflect.TypeOf((*MockClient)(nil).GetServiceUser), workspaceUUID, serviceUserUUID)
}

// GetServiceUserByName mocks base method.
func (m *MockClient) GetServiceUserByName(workspaceName, serviceUserName string) (*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUserByName", workspaceName, serviceUserName)
	ret0, _ := ret[0].(*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceUserByName indicates an expected call of GetServiceUserByName.
func (mr *MockClientMockRecorder) GetServiceUserByName(workspaceName, serviceUserName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUserByName", reflect.TypeOf((*MockClient)(nil).GetServiceUserByName), workspaceName, serviceUserName)
}

// GetServiceUsers mocks base method.
func (m *MockClient) GetServiceUsers(workspaceUUID *uuid.UUID) ([]*types.ServiceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceUsers", workspaceUUID)
	ret0, _ := ret[0].([]*types.ServiceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceUsers indicates an expected call of GetServiceUsers.
func (mr *MockClientMockRecorder) GetServiceUsers(workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceUsers", reflect.TypeOf((*MockClient)(nil).GetServiceUsers), workspaceUUID)
}

// GetUser mocks base method.
func (m *MockClient) GetUser(userUUID *uuid.UUID) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userUUID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), userUUID)
}

// GetUserByEmail mocks base method.
func (m *MockClient) GetUserByEmail(email string, workspaceUUID *uuid.UUID) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email, workspaceUUID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockClientMockRecorder) GetUserByEmail(email, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockClient)(nil).GetUserByEmail), email, workspaceUUID)
}

// GetUserByName mocks base method.
func (m *MockClient) GetUserByName(userName string, workspaceUUID *uuid.UUID) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", userName, workspaceUUID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockClientMockRecorder) GetUserByName(userName, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockClient)(nil).GetUserByName), userName, workspaceUUID)
}

// GetUserRoles mocks base method.
func (m *MockClient) GetUserRoles(userUUID *uuid.UUID) ([]*types.RoleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", userUUID)
	ret0, _ := ret[0].([]*types.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockClientMockRecorder) GetUserRoles(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockClient)(nil).GetUserRoles), userUUID)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers() ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers))
}

// GetWorkspace mocks base method.
func (m *MockClient) GetWorkspace(uuid *uuid.UUID) (*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", uuid)
	ret0, _ := ret[0].(*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockClientMockRecorder) GetWorkspace(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockClient)(nil).GetWorkspace), uuid)
}

// GetWorkspaceByName mocks base method.
func (m *MockClient) GetWorkspaceByName(name string) (*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByName", name)
	ret0, _ := ret[0].(*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByName indicates an expected call of GetWorkspaceByName.
func (mr *MockClientMockRecorder) GetWorkspaceByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByName", reflect.TypeOf((*MockClient)(nil).GetWorkspaceByName), name)
}

// GetWorkspaceByNameAndOrgName mocks base method.
func (m *MockClient) GetWorkspaceByNameAndOrgName(name, organizationName string) (*types.WorkspaceWithOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByNameAndOrgName", name, organizationName)
	ret0, _ := ret[0].(*types.WorkspaceWithOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByNameAndOrgName indicates an expected call of GetWorkspaceByNameAndOrgName.
func (mr *MockClientMockRecorder) GetWorkspaceByNameAndOrgName(name, organizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByNameAndOrgName", reflect.TypeOf((*MockClient)(nil).GetWorkspaceByNameAndOrgName), name, organizationName)
}

// GetWorkspaceRoles mocks base method.
func (m *MockClient) GetWorkspaceRoles(uuid *uuid.UUID) ([]*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceRoles", uuid)
	ret0, _ := ret[0].([]*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceRoles indicates an expected call of GetWorkspaceRoles.
func (mr *MockClientMockRecorder) GetWorkspaceRoles(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceRoles", reflect.TypeOf((*MockClient)(nil).GetWorkspaceRoles), uuid)
}

// GetWorkspaceRules mocks base method.
func (m *MockClient) GetWorkspaceRules(uuid *uuid.UUID) ([]*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceRules", uuid)
	ret0, _ := ret[0].([]*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceRules indicates an expected call of GetWorkspaceRules.
func (mr *MockClientMockRecorder) GetWorkspaceRules(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceRules", reflect.TypeOf((*MockClient)(nil).GetWorkspaceRules), uuid)
}

// GetWorkspaceUsers mocks base method.
func (m *MockClient) GetWorkspaceUsers(uuid *uuid.UUID) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceUsers", uuid)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceUsers indicates an expected call of GetWorkspaceUsers.
func (mr *MockClientMockRecorder) GetWorkspaceUsers(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceUsers", reflect.TypeOf((*MockClient)(nil).GetWorkspaceUsers), uuid)
}

// GetWorkspaces mocks base method.
func (m *MockClient) GetWorkspaces() ([]*types.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaces")
	ret0, _ := ret[0].([]*types.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaces indicates an expected call of GetWorkspaces.
func (mr *MockClientMockRecorder) GetWorkspaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaces", reflect.TypeOf((*MockClient)(nil).GetWorkspaces))
}

// Identify mocks base method.
func (m *MockClient) Identify(token string) (*types.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identify", token)
	ret0, _ := ret[0].(*types.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identify indicates an expected call of Identify.
func (mr *MockClientMockRecorder) Identify(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockClient)(nil).Identify), token)
}

// InviteUser mocks base method.
func (m *MockClient) InviteUser(workspaceUUID *uuid.UUID, email string) (*types.InvitationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUser", workspaceUUID, email)
	ret0, _ := ret[0].(*types.InvitationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockClientMockRecorder) InviteUser(workspaceUUID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockClient)(nil).InviteUser), workspaceUUID, email)
}

// JoinByInvitationToken mocks base method.
func (m *MockClient) JoinByInvitationToken(name, password, invitationToken string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinByInvitationToken", name, password, invitationToken)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinByInvitationToken indicates an expected call of JoinByInvitationToken.
func (mr *MockClientMockRecorder) JoinByInvitationToken(name, password, invitationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinByInvitationToken", reflect.TypeOf((*MockClient)(nil).JoinByInvitationToken), name, password, invitationToken)
}

// RemoveUserFromWorkspace mocks base method.
func (m *MockClient) RemoveUserFromWorkspace(userUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromWorkspace", userUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromWorkspace indicates an expected call of RemoveUserFromWorkspace.
func (mr *MockClientMockRecorder) RemoveUserFromWorkspace(userUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromWorkspace", reflect.TypeOf((*MockClient)(nil).RemoveUserFromWorkspace), userUUID, workspaceUUID)
}

// RevokeSecret mocks base method.
func (m *MockClient) RevokeSecret(userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecret", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecret indicates an expected call of RevokeSecret.
func (mr *MockClientMockRecorder) RevokeSecret(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecret", reflect.TypeOf((*MockClient)(nil).RevokeSecret), userUUID)
}

// SetAccessToken mocks base method.
func (m *MockClient) SetAccessToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", token)
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockClientMockRecorder) SetAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockClient)(nil).SetAccessToken), token)
}

// SetConfigDefaultUserData mocks base method.
func (m *MockClient) SetConfigDefaultUserData(context, token, userUUID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigDefaultUserData", context, token, userUUID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigDefaultUserData indicates an expected call of SetConfigDefaultUserData.
func (mr *MockClientMockRecorder) SetConfigDefaultUserData(context, token, userUUID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigDefaultUserData", reflect.TypeOf((*MockClient)(nil).SetConfigDefaultUserData), context, token, userUUID, email)
}

// SetConfigDefaultWorkspace mocks base method.
func (m *MockClient) SetConfigDefaultWorkspace(uuid *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigDefaultWorkspace", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigDefaultWorkspace indicates an expected call of SetConfigDefaultWorkspace.
func (mr *MockClientMockRecorder) SetConfigDefaultWorkspace(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigDefaultWorkspace", reflect.TypeOf((*MockClient)(nil).SetConfigDefaultWorkspace), uuid)
}

// SetCurrentContext mocks base method.
func (m *MockClient) SetCurrentContext(context string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentContext", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentContext indicates an expected call of SetCurrentContext.
func (mr *MockClientMockRecorder) SetCurrentContext(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentContext", reflect.TypeOf((*MockClient)(nil).SetCurrentContext), context)
}

// SetDefaultWorkspace mocks base method.
func (m *MockClient) SetDefaultWorkspace(workspace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultWorkspace", workspace)
}

// SetDefaultWorkspace indicates an expected call of SetDefaultWorkspace.
func (mr *MockClientMockRecorder) SetDefaultWorkspace(workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultWorkspace", reflect.TypeOf((*MockClient)(nil).SetDefaultWorkspace), workspace)
}

// SetMyEmail mocks base method.
func (m *MockClient) SetMyEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMyEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMyEmail indicates an expected call of SetMyEmail.
func (mr *MockClientMockRecorder) SetMyEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMyEmail", reflect.TypeOf((*MockClient)(nil).SetMyEmail), email)
}

// SetMyName mocks base method.
func (m *MockClient) SetMyName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMyName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMyName indicates an expected call of SetMyName.
func (mr *MockClientMockRecorder) SetMyName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMyName", reflect.TypeOf((*MockClient)(nil).SetMyName), name)
}

// SetMyPassword mocks base method.
func (m *MockClient) SetMyPassword(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMyPassword", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMyPassword indicates an expected call of SetMyPassword.
func (mr *MockClientMockRecorder) SetMyPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMyPassword", reflect.TypeOf((*MockClient)(nil).SetMyPassword), password)
}

// SetUser mocks base method.
func (m *MockClient) SetUser(userUUID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", userUUID)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockClientMockRecorder) SetUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockClient)(nil).SetUser), userUUID)
}

// SuspendUser mocks base method.
func (m *MockClient) SuspendUser(userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendUser", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendUser indicates an expected call of SuspendUser.
func (mr *MockClientMockRecorder) SuspendUser(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendUser", reflect.TypeOf((*MockClient)(nil).SuspendUser), userUUID)
}

// SuspendUserInWorkspace mocks base method.
func (m *MockClient) SuspendUserInWorkspace(workspaceUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendUserInWorkspace", workspaceUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendUserInWorkspace indicates an expected call of SuspendUserInWorkspace.
func (mr *MockClientMockRecorder) SuspendUserInWorkspace(workspaceUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendUserInWorkspace", reflect.TypeOf((*MockClient)(nil).SuspendUserInWorkspace), workspaceUUID, userUUID)
}

// UnbindRoleFromGroup mocks base method.
func (m *MockClient) UnbindRoleFromGroup(workspaceUUID, roleUUID, groupUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindRoleFromGroup", workspaceUUID, roleUUID, groupUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindRoleFromGroup indicates an expected call of UnbindRoleFromGroup.
func (mr *MockClientMockRecorder) UnbindRoleFromGroup(workspaceUUID, roleUUID, groupUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindRoleFromGroup", reflect.TypeOf((*MockClient)(nil).UnbindRoleFromGroup), workspaceUUID, roleUUID, groupUUID, items)
}

// UnbindRoleFromServiceUser mocks base method.
func (m *MockClient) UnbindRoleFromServiceUser(workspaceUUID, roleUUID, serviceUserUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindRoleFromServiceUser", workspaceUUID, roleUUID, serviceUserUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindRoleFromServiceUser indicates an expected call of UnbindRoleFromServiceUser.
func (mr *MockClientMockRecorder) UnbindRoleFromServiceUser(workspaceUUID, roleUUID, serviceUserUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindRoleFromServiceUser", reflect.TypeOf((*MockClient)(nil).UnbindRoleFromServiceUser), workspaceUUID, roleUUID, serviceUserUUID, items)
}

// UnbindRoleFromUser mocks base method.
func (m *MockClient) UnbindRoleFromUser(workspaceUUID, roleUUID, userUUID *uuid.UUID, items map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindRoleFromUser", workspaceUUID, roleUUID, userUUID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindRoleFromUser indicates an expected call of UnbindRoleFromUser.
func (mr *MockClientMockRecorder) UnbindRoleFromUser(workspaceUUID, roleUUID, userUUID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindRoleFromUser", reflect.TypeOf((*MockClient)(nil).UnbindRoleFromUser), workspaceUUID, roleUUID, userUUID, items)
}

// UnbindRuleFromRole mocks base method.
func (m *MockClient) UnbindRuleFromRole(roleUUID, ruleUUID, workspaceUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindRuleFromRole", roleUUID, ruleUUID, workspaceUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindRuleFromRole indicates an expected call of UnbindRuleFromRole.
func (mr *MockClientMockRecorder) UnbindRuleFromRole(roleUUID, ruleUUID, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindRuleFromRole", reflect.TypeOf((*MockClient)(nil).UnbindRuleFromRole), roleUUID, ruleUUID, workspaceUUID)
}

// UnbindServiceUserFromGroup mocks base method.
func (m *MockClient) UnbindServiceUserFromGroup(worspaceUUID, groupUUID, serviceUserUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindServiceUserFromGroup", worspaceUUID, groupUUID, serviceUserUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindServiceUserFromGroup indicates an expected call of UnbindServiceUserFromGroup.
func (mr *MockClientMockRecorder) UnbindServiceUserFromGroup(worspaceUUID, groupUUID, serviceUserUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindServiceUserFromGroup", reflect.TypeOf((*MockClient)(nil).UnbindServiceUserFromGroup), worspaceUUID, groupUUID, serviceUserUUID)
}

// UnbindUserFromGroup mocks base method.
func (m *MockClient) UnbindUserFromGroup(workspaceUUID, groupUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindUserFromGroup", workspaceUUID, groupUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindUserFromGroup indicates an expected call of UnbindUserFromGroup.
func (mr *MockClientMockRecorder) UnbindUserFromGroup(workspaceUUID, groupUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindUserFromGroup", reflect.TypeOf((*MockClient)(nil).UnbindUserFromGroup), workspaceUUID, groupUUID, userUUID)
}

// UpdateRole mocks base method.
func (m *MockClient) UpdateRole(roleUUID *uuid.UUID, roleName string, workspaceUUID *uuid.UUID) (*types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", roleUUID, roleName, workspaceUUID)
	ret0, _ := ret[0].(*types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockClientMockRecorder) UpdateRole(roleUUID, roleName, workspaceUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockClient)(nil).UpdateRole), roleUUID, roleName, workspaceUUID)
}

// UpdateRule mocks base method.
func (m *MockClient) UpdateRule(ruleUUID *uuid.UUID, ruleName string, workspaceUUID *uuid.UUID, ruleActions []string, object string, deny bool) (*types.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", ruleUUID, ruleName, workspaceUUID, ruleActions, object, deny)
	ret0, _ := ret[0].(*types.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockClientMockRecorder) UpdateRule(ruleUUID, ruleName, workspaceUUID, ruleActions, object, deny interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockClient)(nil).UpdateRule), ruleUUID, ruleName, workspaceUUID, ruleActions, object, deny)
}

// UpdateUser mocks base method.
func (m *MockClient) UpdateUser(userUUID *uuid.UUID, name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userUUID, name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClientMockRecorder) UpdateUser(userUUID, name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClient)(nil).UpdateUser), userUUID, name, email, password)
}

// VerifyPublicKey mocks base method.
func (m *MockClient) VerifyPublicKey(keyType, key, workspaceUUID, username, hostname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPublicKey", keyType, key, workspaceUUID, username, hostname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPublicKey indicates an expected call of VerifyPublicKey.
func (mr *MockClientMockRecorder) VerifyPublicKey(keyType, key, workspaceUUID, username, hostname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPublicKey", reflect.TypeOf((*MockClient)(nil).VerifyPublicKey), keyType, key, workspaceUUID, username, hostname)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockCache) Set(arg0 string, arg1 interface{}, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), arg0, arg1, arg2)
}
